import { Loader } from '@mantine/core';
import { type NextPage } from 'next';
import Head from 'next/head';
import { signIn, signOut, useSession } from 'next-auth/react';
import { useEffect, useState } from 'react';

import ThemeSwitcher from '~/components/switchtheme';
import { type ThemeState, useThemeStore } from '~/store/store';
import { api } from '~/utils/api';

import Logged from './logged';

const Home: NextPage = () => {
	const { data: sessionData } = useSession();
	const currentTheme = useThemeStore((state: ThemeState) => state.theme);
	const [globalTheme, setGlobalTheme] = useState<'dark' | 'light'>('light');

	const { data: userData } = api.users.getUserData.useQuery(undefined, {
		enabled: sessionData?.user !== undefined,
	});

	const [width, setWidth] = useState<number>(0);

	useEffect(() => {
		const handleWindowSizeChange = () => {
			if (typeof window !== 'undefined') {
				setWidth(window.innerWidth);
			}
		};

		if (typeof window !== 'undefined') {
			setWidth(window.innerWidth);
			window.addEventListener('resize', handleWindowSizeChange);
			return () => {
				window.removeEventListener('resize', handleWindowSizeChange);
			};
		}
	}, []);

	const isMobile = width <= 768;

	useEffect(() => {
		if (sessionData?.user && userData && userData.type === 'user') {
			setTimeout(() => {
				void signOut();
			}, 1000);
		}
	}, [sessionData?.user, userData]);

	useEffect(() => {
		if (currentTheme === 'dark') {
			setGlobalTheme('dark');
		} else {
			setGlobalTheme('light');
		}
	}, [currentTheme]);

	return (
		<>
			<Head>
				<title>Shayenek - Todos and notes</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className={globalTheme}>
				<section className="flex min-h-screen flex-col items-center bg-[#f4f6f8] transition duration-200 dark:bg-[#101213] ">
					{sessionData && (
						<button
							className="mt-4 hidden rounded-full bg-red-500 px-10 py-3 font-semibold text-white no-underline transition hover:bg-red-800 md:absolute md:right-4 md:block"
							onClick={() => void signOut()}
						>
							Sign Out
						</button>
					)}
					<div className="container mb-20 mt-14 flex flex-col items-center justify-center gap-12 p-4 md:mb-0 md:mt-0 md:py-16">
						{!sessionData && (
							<h1 className="text-5xl font-extrabold tracking-tight text-black dark:text-white sm:text-[5rem]">
								Log In
							</h1>
						)}
						<div className="flex w-full flex-col items-center gap-2 md:mt-8">
							{!sessionData && (
								<button
									className="rounded-full bg-white px-10 py-3 font-semibold text-black no-underline transition duration-200 hover:bg-blue-500 hover:text-white dark:bg-white/10 dark:text-white dark:hover:bg-white/20"
									onClick={() => void signIn()}
								>
									Sign In
								</button>
							)}
							{sessionData && (
								<>
									{userData && userData.type === 'admin' ? (
										<Logged isMobile={isMobile} />
									) : (
										<div className="flex items-center gap-4">
											<h1 className="text-4xl font-extrabold text-black dark:text-white">
												Hold tight!
											</h1>
											<Loader />
										</div>
									)}
								</>
							)}
						</div>
					</div>
				</section>
				{!isMobile || !sessionData ? (
					<div className="fixed bottom-5 right-5">
						<ThemeSwitcher size="h-[32px] w-[64px]" />
					</div>
				) : null}
			</main>
		</>
	);
};

export default Home;
