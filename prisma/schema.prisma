generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  type          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  title           String
  description     String?
  completed       Boolean   @default(false)
  authorId        String
  type            String    @default("note")
  startTime       String?   @default("00:00")
  endTime         String?   @default("00:00")
  startDate       DateTime? @default(now())
  endDate         DateTime?
  position        Int
  calendarEventId String?
  checklist       String?
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Code {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code      String
}

model Codesession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
}

model ShoppingCategoriesList {
  id        Int                @id @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  name      String
  database  ShoppingDataBase[]
  items     ShoppingItem[]
}

model ShoppingDataBase {
  id         Int                    @id @unique
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  name       String
  location   String?
  weight     Int                    @default(1)
  categoryId Int
  category   ShoppingCategoriesList @relation(fields: [categoryId], references: [id])
}

model ShoppingItem {
  id         Int                    @id @unique
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  quantity   Int
  checked    Boolean                @default(false)
  categoryId Int
  location   String?
  name       String
  category   ShoppingCategoriesList @relation(fields: [categoryId], references: [id])
}
