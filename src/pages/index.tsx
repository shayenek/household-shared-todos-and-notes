import { TextInput } from '@mantine/core';
import { useForm } from '@mantine/form';
import { notifications } from '@mantine/notifications';
import { IconLock } from '@tabler/icons-react';
import { setCookie, getCookie, deleteCookie } from 'cookies-next';
import { type NextPage } from 'next';
import Head from 'next/head';
import { signIn, signOut, useSession } from 'next-auth/react';
import { useEffect, useState } from 'react';

import ThemeSwitcher from '~/components/switchtheme';
import {
	type AuthorizedUserState,
	useAuthorizedUserStore,
	type ThemeState,
	useThemeStore,
} from '~/store/store';
import { api } from '~/utils/api';

import Logged from './logged';

const Home: NextPage = () => {
	const { data: sessionData } = useSession();

	const currentTheme = useThemeStore((state: ThemeState) => state.theme);
	const isAuthorized = useAuthorizedUserStore((state: AuthorizedUserState) => state.isAuthorized);
	const [globalTheme, setGlobalTheme] = useState<'dark' | 'light'>('light');

	const { data: userData } = api.users.getUserData.useQuery(undefined, {
		enabled: sessionData?.user !== undefined,
	});

	const [width, setWidth] = useState<number>(0);

	const checkSessionToken = api.login.checkSession.useMutation({
		onSuccess: () => {
			useAuthorizedUserStore.setState({ isAuthorized: true });
		},
	});

	useEffect(() => {
		const sessionToken = getCookie('sessionToken') as string;

		if (sessionToken) {
			checkSessionToken.mutate({ sessionToken: sessionToken });
		}
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, []);

	useEffect(() => {
		const handleWindowSizeChange = () => {
			if (typeof window !== 'undefined') {
				setWidth(window.innerWidth);
			}
		};

		if (typeof window !== 'undefined') {
			setWidth(window.innerWidth);
			window.addEventListener('resize', handleWindowSizeChange);
			return () => {
				window.removeEventListener('resize', handleWindowSizeChange);
			};
		}
	}, []);

	const isMobile = width <= 768;

	useEffect(() => {
		if (currentTheme === 'dark') {
			setGlobalTheme('dark');
		} else {
			setGlobalTheme('light');
		}
	}, [currentTheme]);

	const loginCodeForm = useForm({
		initialValues: {
			loginCode: '',
		},
		validate: {
			loginCode: (value) =>
				value.length < 4 ? 'Login code must be at least 4 characters long' : null,
		},
	});

	const checkLoginCode = api.login.checkLoginCode.useMutation({
		onSuccess: (data) => {
			if (data) {
				setCookie('sessionToken', data, {
					maxAge: 30 * 24 * 60 * 60,
					path: '/',
				});
				useAuthorizedUserStore.setState({ isAuthorized: true });
			}
			loginCodeForm.reset();
		},
		onError: (error) => {
			notifications.show({
				title: 'Error',
				message: error.message,
				color: 'red',
			});
		},
	});

	useEffect(() => {
		if (sessionData) {
			if (userData) {
				if (userData.type === 'admin') {
					useAuthorizedUserStore.setState({ isAuthorized: true });
				} else {
					notifications.show({
						title: 'Error',
						message: 'You are not authorized to use this app',
						color: 'red',
					});
					void signOut();
				}
			}
		} else {
			useAuthorizedUserStore.setState({ isAuthorized: false });
		}
	}, [sessionData, userData]);

	const handleSignOut = async () => {
		await signOut();
		useAuthorizedUserStore.setState({ isAuthorized: false });
		deleteCookie('sessionToken');
	};

	return (
		<>
			<Head>
				<title>Shayenek - Todos and notes</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className={globalTheme}>
				<section
					className={`flex min-h-dynamicScreen flex-col items-center bg-[#f4f6f8] transition duration-200 dark:bg-[#101213] md:min-h-screen ${
						!isAuthorized ? 'items-center justify-center' : ''
					}`}
				>
					{isAuthorized && (
						<button
							className="mt-4 hidden rounded-full bg-red-500 px-10 py-3 font-semibold text-white no-underline transition hover:bg-red-800 md:absolute md:right-4 md:block"
							onClick={() => void handleSignOut()}
						>
							Sign Out
						</button>
					)}
					<div
						className={`container mb-20 flex flex-col items-center justify-center gap-12 p-4 md:mb-0 md:mt-0 md:py-16 ${
							sessionData ? 'mt-14' : ''
						}`}
					>
						{!isAuthorized && (
							<div>
								<h1 className="text-5xl font-extrabold tracking-tight text-black dark:text-white sm:text-[5rem]">
									Hello!
								</h1>
								<h2 className="text-center text-black dark:text-white">
									Have a good day!
								</h2>
							</div>
						)}
						<div className="flex w-full flex-col items-center gap-2 md:mt-8">
							{!isAuthorized && (
								<>
									<button
										className="w-60 rounded-lg bg-white px-10 py-3 font-semibold text-black no-underline transition duration-200 hover:bg-blue-500 hover:text-white dark:bg-white/10 dark:text-white dark:hover:bg-white/20"
										onClick={() => void signIn()}
									>
										Sign In
									</button>
									<form
										onSubmit={loginCodeForm.onSubmit((values) => {
											checkLoginCode.mutate({ ...values });
										})}
										className="flex w-60 flex-col items-center gap-2 rounded-lg bg-white p-3 transition duration-200 dark:bg-white/10"
									>
										<TextInput
											placeholder="Or use login code instead"
											{...loginCodeForm.getInputProps('loginCode')}
											styles={{
												input: {
													color:
														globalTheme === 'dark' ? '#fff' : '#030910',
													background:
														globalTheme === 'dark'
															? '#17181c'
															: '#ecf0f3',
													borderColor:
														globalTheme === 'dark'
															? '#2d3338'
															: '#ecf0f3',
													transition: 'all 200ms',
												},
											}}
											icon={<IconLock size="1rem" />}
											mb="sm"
										/>
										<button
											type="submit"
											className="basis-1/2 rounded-lg border-2 border-[#eeedf0] bg-white p-2 px-6 text-sm text-[#02080f] transition duration-200 enabled:hover:bg-blue-500 enabled:hover:text-white disabled:opacity-50 dark:border-[#2b3031] dark:bg-white/10 dark:text-white enabled:dark:hover:bg-white/20"
											disabled={
												checkLoginCode.isLoading ||
												loginCodeForm.values.loginCode.length < 1
											}
										>
											Login
										</button>
									</form>
								</>
							)}
							{isAuthorized && <Logged isMobile={isMobile} />}
						</div>
					</div>
				</section>
				{!isMobile || !isAuthorized ? (
					<div className="fixed bottom-5 right-5">
						<ThemeSwitcher size="h-[32px] w-[64px]" />
					</div>
				) : null}
			</main>
		</>
	);
};

export default Home;
